// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["windows", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int         @id @default(dbgenerated())
  email    String      @unique
  utorid   String      @unique
  name     String
  role     AccountRole @default(student)
  groups   Group[]     @relation(name: "Members")
  invited  Group[]     @relation(name: "Invited")
  manager  Group[]     @relation(name: "Managers")
  requests Request[]   @relation(name: "Author")
  approver Request[]   @relation(name: "Approver")
}

enum AccountRole {
  student
  admin
  approver
  tcard
}

model Request {
  id          Int           @id @default(dbgenerated())
  status      RequestStatus @default(pending) // the status of the request defined by the Request status enum
  group       Group         @relation(fields: [groupId], references: [id]) // the group making the request
  groupId     Int
  author      User          @relation(name: "Author", fields: [authorId], references: [id]) // the author of the request
  authorId    Int
  approver    User          @relation(name: "Approver", fields: [approverId], references: [id]) // the author of the request
  approverId  Int
  startDate  DateTime // the starting date and time of the request in ISO 8601 format
  endDate    DateTime // the ending date and time of the request in ISO 8601 format
  description String // a summary of the event provided to the approvers for review
  title       String // the name of the event
  room        Room          @relation(fields: [roomId], references: [id]) // the room booked
  roomId      Int
  reason      String? // the reason for the denial/approval of a request
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum RequestStatus {
  pending // the request is awaiting approver's approval
  denied // the request has been denied by approver
  cancelled // the request has been cancelled by the author or group manager
  needTCard // the request has been approved by an approver but still needs TCard approval
  completed // the request is approved and author has TCard access
}

model Group {
  id       Int       @id @default(dbgenerated())
  members  User[]    @relation(name: "Members") // all members of the group, including managers, excluding any invited users
  invited  User[]    @relation(name: "Invited") // users that have been invited to the group and have yet to accept
  managers User[]    @relation(name: "Managers") // the managers of the group
  Request  Request[]
}

model Room {
  id            Int       @id @default(dbgenerated())
  roomName     String // the room number, eg. DH2014
  friendlyName String // friendly name, eg. Hacklab
  capacity      Int? // (optional) occupancy limit
  requests      Request[] // all requests made for this room
}
